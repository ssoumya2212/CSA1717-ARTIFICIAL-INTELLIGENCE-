def minmax(depth, node_index, is_max, scores, height):
    # Base case: leaf node
    if depth == height:
        return scores[node_index]

    if is_max:
        return max(
            minmax(depth + 1, node_index * 2, False, scores, height),
            minmax(depth + 1, node_index * 2 + 1, False, scores, height)
        )
    else:
        return min(
            minmax(depth + 1, node_index * 2, True, scores, height),
            minmax(depth + 1, node_index * 2 + 1, True, scores, height)
        )

# Example scores (leaf nodes of the game tree)
scores = [3, 5, 6, 9, 1, 2, 0, -1]
height = 3  # log2(len(scores))

optimal_value = minmax(0, 0, True, scores, height)
print("Optimal value:", optimal_value)
